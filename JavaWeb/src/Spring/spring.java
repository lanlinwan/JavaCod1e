package Spring;

public class spring {
    //Spring:
    ///Spring 是一个开源应用框架，旨在降低应用程序开发的复杂度。它是轻量级、松散耦合的。
    //它具有分层体系结构，允许用户选择组件，同时还为 J2EE 应用程序开发提供了一个有凝聚力的框架。
    //它可以集成其他框架，如 Structs、Hibernate、EJB 等，所以又称为框架的框架

    //Spring是一个轻量级Java开发框架,目的是为了解决企业级应用开发的业务逻辑层和其他各层的耦合问题。
    // 它是一个分层的JavaSE/JavaEE full-stack（一站式）轻量级开源框架，为开发Java应用程序提供全面的基础架构支持。
    // Spring负责基础架构，因此Java开发者可以专注于应用程序的开发,Spring最根本的使命是解决企业级应用开发的复杂性，即简化Java开发。

    //面试答:
    // Spring是一个 轻量级开源的的框架,它具有分层体系架构,允许我们选择使用
    // 它可以解决我们进行企业级应用开发时业务逻辑层和各层的耦合问题
    // 它为我们提供了Java应用程序提供了全面的基础架构支持,我们只需专注于应用程序的开发
    // 它最根本的使命是 解决企业级应用用户开发的复杂性,即简化Java开发

    //Spring Framework系统架构:
    //●Data Access:数据访问
    //●Data Integration: 数据集成
    //●Web: Web开发
    //●AOP:面向切面编程
    //●Aspects: AOP思想实现
    //●Core Container: 核心容器
    //●Test: 单元测试与集成测试


    //IoC ( Inversion of Control )控制反转
    //● 使用对象时,由主动new产生对象转换为由外部提供对象，此过程中对象创建控制权由程序转移到外部,此思想称为控制反转
    //● Spring技术对IoC思想进行了实现
    //● Spring提供了一 个容器，称为IoC容器， 用来充当IoC思想中的外部)
    //● IoC容器负责对象的创建、初始化等-系列工作， 被创建或被管理的对象在IoC容器中统称为Bean

    //IoC 的一些好处是：
    // 它将最小化应用程序中的代码量。
    // 它将使您的应用程序易于测试，因为它不需要单元测试用例中的任何单例或 JNDI 查找机制。
    // 它以最小的影响和最少的侵入机制促进松耦合。
    // 它支持即时的实例化和延迟加载服务

    //DI ( Dependency Injection )依赖注入
    //  依赖注入的本质就是装配，装配是依赖注入的具体行为，这就是两者的关系。
    //● 在容器中建立bean 与bean之间的依赖关系的整个过程,称为依赖注入
    //目标:充分解耦
    //●使用IoC容器管理bean (IoC)
    //●在IoC容器内将有依赖关 系的bean进行关系绑定(DI)
    //最终效果
    //●使用对象时不仅可以直接从IoC容器中获取, 并且获取到的bean已经绑定了所有的依赖关系

    //AOP:
    //●AOP(Aspect Oriented Programming) 面向切面编程，- 种编程范式,指导开发者如何组织程序结构
    // SpringAOP利用了动态代理机制,如果实现了接口的类，是使用jdk的动态代理。如果没实现接口，就使用cglib
    // CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法（继承）。
    //●00P(Object Oriented Programming )面向对象编程
    //●作用:在不惊动原始设计的基础上为其进行功能增强
    //●Spring理念:无入侵式/无侵入式

    //aspect 由 pointcount 和 advice 组成, 它既包含了横切逻辑的定义, 也包
    //括了连接点的定义. Spring AOP 就是负责实施切面的框架, 它将切面所定义的横
    //切逻辑编织到切面所指定的连接点中. AOP 的工作重心在于如何将增强编织目标
    //对象的连接点上, 这里包含两个工作:
    //1、如何通过 pointcut 和 advice 定位到特定的 joinpoint 上 2、如何在
    //advice 中编写切面代码.

    //●连接点( JoinPoint ) : 程序执行过程中的任意位置，粒度为执行方法、 抛出异常、设置变量等
    //  ■在SpringAOP中 ,理解为方法的执行
    //●切入点( Pointcut ) :匹配连接点的式子
    //  ■在SpringAOP中 , -个切入点可以只描述一个具体方法,也可以匹配多个方法
    //  ◆一个具体方法: com. itheima . dao包下的BookDao接口中的无形参无返回值的save方法
    //  ◆匹配多个方法:所有的save方法，所有的get开头的方法，所有以ao结尾的接口中的任意方法，所有带有- -个参数的方法
    //●通知( Advice ) :在切入点处执行的操作,也就是共性功能
    //  ■在SpringAOP中 ,功能最终以方法的形式呈现
    //通知类:定义通知的类
    //  ●切面( Aspect ) :描述通知与切入点的对应关系

    //事务:
    //

}
