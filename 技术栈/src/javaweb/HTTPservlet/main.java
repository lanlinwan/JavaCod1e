package javaweb.HTTPservlet;

public class main {
    //JavaWeb技术栈
    //B/S架构: Browser/Server, 浏览器/服务器架构模式，它的特点是，客户端只需要浏览器，应用程序的逻辑和数
    //据都存储在服务器端。浏览器只需要请求服务器,获取Web资源，服务器把Web资源发送给浏览器即可
    //➢好处: 易于维护升级:服务器端升级后,客户端无需任何部署就可以使用到新的版本

    //●静态资源: HTML、CSS、JavaScript. 图片等。负责页面展现
    //● 动态资源: Servlet、 JSP等。负责逻辑处理
    //web服务器
    //●数据库:负责存储数据
    //Web服务器:负责解析HTTP协议，解析请求数据,并发送响应数据

    //HTTP协议:定义通信规则
    //●概念: HyperText Transfer Protocol,超文本传输协议，规定了浏览器和服务器之间数据传输的规则
    //●javaweb.HTTP 协议特点: .
    //1. 基于TCP协议:面向连接，安全
    //2.基于请求-响应模型的: -次请求对应一次响应
    //3. HTTP协议是无状态的协议:对于事务处理没有记忆能力。每次请求-响应都是独立的。
    //缺点:多次请求间不能共享数据。Java中使用会话技术(Cookie、 Session) 来解决这个问题
    //优点:速度快

    //javaweb.HTTP-请求数据格式
    //● 请求数据分为3部分:
    //1. 请求行:请求数据的第一 行。其中GET表示请求方式，/表示请求资源路径，javaweb.HTTP/1.1表示协议版本
    //2.请求头: 第二行开始,格式为key: value形式。
    //3.请求体: POST请求的最后- 部分,存放请求参数

    //GET请求和POST请求区别:
    //1. GET请求请求参 数在请求行中，没有请求体。
    //   POST请求请求参数在请求体中
    //常见的HTTP请求头:
    //2. GET请求请求参数大小有限制， POST没有
    /*
      1:传参方式不同:get请求在Url后面直接拼接参数;
                  Post请求默认在请求体中传参;
      2:传的参数限制不同:因为get请求在url后面传参,url长度和数据类型有限制,所以get请求传的所以get请求传的 参数长度和数据类型(字符串类型)都有限制;
                      因为post请求默认用请求体传参,请求体中参数无限制,所以参数长度和数据类型无限制;

      3:安全性不同:get请求不安全;Post请求相对安全;
      4:原理不同:get每次请求,客户端向服务器发送一次数据包;
               post每次请求,客户端向服务器发送两次数据包;
               (对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200
              (返回数据);而对于POST，浏览器先发送header，服务器响应100 continue，
               浏览器再发送data，服务器响应200 ok(返回数 并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。)
       5:请求速度:get请求速度快;post请求速度慢.
       6:应用场景不同:对数据安全性要求高就用post请求;其他全用get请求.
     */

    //● 常见HTTP请求头
    //Host:表示请求的主机名
    //User-Agent:浏览器版本,例如Chrome浏览器的标识类似Moilla/5.0 ..
    //Chrome/79, IE浏览器的标识类似Moilla/5.0 (Windows NT ... like Gecko;
    //Accept:表示浏览器能接收的资源类型，如text/*, image/*或者 */*表示所有;
    //Accept-Language:表示浏览器偏好的语言，服务器可以据此返回不同语言的网页;
    //Accept-Encoding:表示浏览器可以支持的压缩类型，例如gzip, deflate等。

    //javaweb.HTTP-响应数据格式
    //●响应数据分为3部分:

    //1. 响应行:响应数据的第- -行。其中HTTP/1.1表示协议版本，200表示响应状态码，OK表示状态码描述
    //2. 响应头:第二行开始，格式为key: value形式
    //3. 响应体:最后- -部分。存放响应数据

    //状态码分类说明
    //1xx .
    //响应中--临时状态码, 表示请求已经接受,告诉客户端应该继续请求或者如果它已经完成则忽略它
    //2xx
    //成功一--表示请求已经被成功接收， 处理已完成
    //|3xx
    //重定向--重定向到其它地方: 它让客户端再发起一个请求以完成整 个处理。
    //常见的HTTP响应头: .
    //4xx
    //客户端错误--处理发生错误， 责任在客户端，如:客户端的请求一个不存在的资源， 客户端未被授权，禁止访
    //Content- Type:表示该响应内容的类型，例如text/htmlI,
    //5xx
    //服务器端错误--处理发生错误， 责任在服务端，如:服务端抛出异常，路由出错, HTTP版本不支持等

    //常见的HTTP响应头: .
    //Content- Type:表示该响应内容的类型，例如text/htmlI,image/jpeg;
    //Content-Length:表示该响应内容的长度(字节数) ; .
    //Content-Encoding:表示该响应压缩算法,例如gzip;
    //Cache-Control:指示客户端应如何缓存，例如max- age=300
    //表示可以最多缓存300秒



}
