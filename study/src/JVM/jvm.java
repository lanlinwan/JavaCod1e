package JVM;

public class jvm {
    //Java中引入了虚拟机的概念，即在机器和编译程序之间加入了一层抽象的虚拟的机器。 这台虚拟的机器在任何平台
    //上都提供给编译程序一个的共同的接口。

    //编译程序只需要面向虚拟机，生成虚拟机能够理解的代码，然后由解释器来将虚拟机代码转换为特定系统的机器码
    //执行。在Java中，这种供虚拟机理解的代码叫做字节码(即扩展名为.class的文件)，它不面向任何特定的处理
    //器，只面向虚拟机。

    //每- -种平台的解释器是不同的，但是实现的虚拟机是相同的。Java源程序经过编译器编(javac)译后变成字节码，字节码由
    //虚拟机解释执行，虚拟机将每一条要执行的字节码送给解释器， 解释器将其翻译成特定机器上的机器码,然后在特
    //定的机器.上运行。这也就是解释了Java的编译与解释并存的特点。


    //Java源代码-->编译器-->jvm可执行的ava字节码(即虚拟指令)----->jvm中解释器---->机器可执行的二进制机器码-->程序运行。

    //JVM的生命周期:
    //JVM在Java程序开始运行的时候，它才运行，程序结束的时它就停止。
    //一个Java程序会开启一个JVM进程，如果一台机器上运行3个Java程序，那么就会有3个运行中的JVM进程。
    //JVM中的线程分为两种：守护线程和普通线程
    //守护线程是JVM自己使用的线程，比如垃圾回收（GC）就是一个守护线程。
    //普通线程一般是Java程序的线程，只要JVM中有普通线程在执行，那么JVM就不会停止。

    //结束生命周期
    //在如下几种情况下，Java虚拟机将结束生命周期
    //1、执行了System.exit()方法
    //2、程序正常执行结束
    //3、程序在执行过程中遇到了异常或错误而终止进程
    //4、由于操作系统出现错误而导致Java虚拟机进程终止

    //JDK和JRE的区别
    //JDK是面向开发人员使用的SDK，它提供了Java的开发环境和运行环境，JDK中包含了JRE。
    //JRE是Java的运行环境，是面向所有Java程序的使用者，包括开发者。
    //JVM是包含在JRE里面的。

    //组成部分:
    // 1.类加载器 ClassLoader）
    // 2.内存结构 （Runtime Data Area）
    // 3.执行引擎 Execution Engine）
    // 4.本地库接口（Native Interface）
    //用途：
    // 程序在执行之前先要把java代码转换成字节码（class文件），jvm首先需要把字节码通过 类加载器（ClassLoader）
    // 把文件加载到内存中 运行时数据区（Runtime Data Area） ，而字节码文件是jvm的一套指令集规范，并不能直接交个底层操作系统去执行，
    // 因此需要特定的命令解析器 执行引擎（Execution Engine） 将字节码翻译成底层系统指令再交由CPU去执行，
    // 而这个过程中需要调用其他语言的接口 本地库接口（Native Interface）来实现整个程序的功能，这就是这4个主要组成部分的职责与功能。


}
