package 多线程.面试;




public class 悲观锁乐观锁 {

        //1.悲观锁的代表是 synchronized和Lock锁
        //①其核心思想是 [线程只有占有了锁,才能去操作共享变量,每次只有- -个线程占锁成功，获取锁失败的线程,都得停下来等待]
        //②线程从运行到阻塞、 再从阻塞到唤醒，涉及线程上下文切换，如果频繁发生，影响性能
        //③实际上, 线程在获取synchronized和Lock锁时，如果锁已被占用，都会做几次重试操作,减少阻塞的机会

        //2.乐观锁的代表 是AtomicInteger,使用cas来保证原子性
        //①其核心思想是 [无需加锁，每次只有一个线程能成功修改共享变量,其它失败的线程不需要停止,不断重试直至成功]
        //②由于线程一 -直运行， 不需要阻塞，因此不涉及线程上下文切换
        //③它需要多核 cpu支持，且线程数不应超过cpu核数



}
