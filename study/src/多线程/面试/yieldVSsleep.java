package 多线程.面试;

public class yieldVSsleep {
        //Thread.yield()方法作用是：暂停当前正在执行的线程对象（及放弃当前拥有的cup资源），并执行其他线程。
        //yield()做的是让当前运行线程回到可运行状态，以允许具有相同优先级的其他线程获得运行机会。因此，使用yield()的
        //目的是让相同优先级的线程之间能适当的轮转执行。但是，实际中无法保证yield()达到让步目的，因为让步的线程还有可能被选中
        //结论：yield()从未导致线程转到等待/睡眠/阻塞状态。在大多数情况下，yield()将导致线程从运行状态转到可运行状态，但有可能没有效果

    //sleep 与 yield 又 区别
    //相同: sleep() 与 yield() 他们都是 Thread得方法,都不会释放 资源锁
    //① sleep()方法给其他线程运行机会时不考虑线程的优先级，因此会给低优先级的线程以运行的机会
    //   yield()方法只会给相同优先级或更高优先级的线程以运行的机会；
    //② 线程执行 sleep()方法后转入阻塞（blocked）状态，
    //   而执行 yield()方法后转入就绪（ready）状态,有可能会立马被 cup执行
    //③ sleep()方法声明抛出 InterruptedException，而 yield()方法没有声明任何异常；
    //④ sleep()方法比 yield()方法（跟操作系统 CPU 调度相关）具有更好的可移植性。
}
