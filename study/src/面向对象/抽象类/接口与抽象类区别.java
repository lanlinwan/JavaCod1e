package 面向对象.抽象类;

public class 接口与抽象类区别 {
    //接口和抽象类的区别
    //●抽象类可以存在普通成员函数,而接口中只能存在public abstract方法。
    //●抽象类中的成员变可以是各种类型的，而接口中的成员变量只能是public static final类型的。
    //●抽象类只能继承一个， 接口可以实现多个。
    //●抽象类有构造方法,接口没有构造方法
    //●作用不同:抽象类的作用供子类继承重而实现代码复用或规定子类必须拥有行为;
    //        接口的作用提高程序的灵活性和可扩展性.

    //接口的设计目的，是对类的行为进行约束(更准确的说是一种”有”约束, 因为接口不能规定类不可以有什么行
    //为)，也就是提供一种机制，可以强制要求不同的类具有相同的行为。它只约束了行为的有无，但不对如何实现行
    //为进行限制。

    //而抽象类的设计目的，是代码复用。当不同的类具有某些相同的行为(记为行为集合A)，其中一部分行为的实现
    //式一致时(A的非真子集，记为B)，可以让这些类都派生于一个抽象类。在这个抽象类中实现了B,避免让所有
    //的子类来实现B,这就达到了代码复用的目的。而A减B的部分，留给各个子类自己实现。正是因为A-B在这里没有
    //实现，所以抽象类不允许实例化出来(否则当调用到A-B时，无法执行)。

    //抽象类是对类本质的抽象，表达的是is a的关系,比如: BMwisa Car.抽象类包含并实现子类的通用特性,将
    //子类存在差异化的特性进行抽象，交由子类去实现。

    //而接口是对行为的抽象，表达的是like a的关系。比如: Bird likea Aircraft (像~ 飞行器一样可以飞) ，但其
    //本质上isa Bird。接口的核心是定义行为，即实现类可以做什么,至于实现类主体是谁、是如何实现的，接口并
    //不关心。

    //使用场景:当你关注-个事物的本质的时候，用抽象类;当你关注一个操作的时候， 用接口。
    //抽象类的功能要远超过接口，但是,定义抽象类的代价高。因为高级语言来说(从实际设计上来说也是)每个类只
    //能继承- -个类。在这个类中，你必须继承或编写出其所有子类的所有共性。虽然接口在功能上会弱化许多,但是它
    //只是针对一个动作的描述。而且你可以在一个类中同时实现多个接口。在设计阶段会降低难度
    //
}
