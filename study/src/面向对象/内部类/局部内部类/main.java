package 面向对象.内部类.局部内部类;

public class main {
    public static void main(String[] args) {
        //局部内部类
        //1.将内部类定义在方法里面就叫做局部内部类，类似于方法里面的局部变量。
        //2.外界是无法直接使用，需要在方法内部创建对象并使用。
        //3.该类可以直接访问外部类的成员，也可以访问方法内的局部变量。
        //局部内部类是定义在外围类的方法中的，在访问的时候它可以直接访问外围类的所有成员！但是不能随便访问局部变量，除非这个局部变量被final修饰。

        //为什么必须局部变量加final关键字呢？
        //生命周期不同:
        // 因为局部变量直接存储在栈中，当方法执行结束，非final的局部变量就被销毁，
        // 而局部内部类对局部变量的引用依然存在，当局部内部类要调用局部变量时，就会出错，出现非法引用。
        // 简单来说，就是非final的局部变量的生命周期比局部内部类的生命周期短

        //数据不同步:
        // 内部类并不是直接使用传递进来的参数，而是将传递进来的参数通过自己的构造器备份到自己内部，
        // 表面看是同一个变量，实际调用的是自己的属性而不是外部类方法的参数，
        // 如果在内部类中，修改了这些参数，并不会对外部变量产生影响，仅仅改变局部内部类中备份的参数。
        // 但是在外部调用时发现值并没有被修改，造成数据不同步。所以使用final避免数据不同步的问题
    }
}
