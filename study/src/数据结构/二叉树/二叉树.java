package 数据结构.二叉树;

public class 二叉树 {
    // 二叉树:每一个节点下面最多有两个子节点
    //
    //  内部结构:每一个子节点内部存了  父节点地址,值,左子节点地址,右子节点地址
    //
    //  二叉查找:又称二叉排序树或者二叉搜索树
    //      每一个节 点上最多有两个子节点
    //      任意节 点左子树上的值都小于当前节点
    //      任意节 点右子树上的值都大于当前节点

    //  特点:
    //   ①二叉树特点是 左节点<父节点<右节点，可以范围查找；
    //   ②一颗平衡的二叉树，查找的时间复杂度相当于折半查找；
    //   ③一颗极度不平衡的二叉树会退化成一条链表，查找的时间复杂度最大；
    //   ④在数据越来越多的情况下，二叉树的深度势必会越来越深，查找也会越来越困难。

    //
    //   二叉树遍历:
    //    1.前序遍历:
    //         从根结点开始,然后按照当前结点，左子结点，右子结点的顺序遍历
    //    2.中序遍历:
    //         从最左边的子节点开始,然后按照左子节点结点，当前结点，右子结点的顺序遍历
    //    2.后序遍历
    //         从最左边的子节点开始,然后按照左子节点结点，右结点，当前结点的顺序遍历
    //    4.层序遍历
    //         一层一层去遍历

    //二叉树缺点:顺序插入时，会形成一个链表,查询性能大大降低。大数据量情况下，层级较深,检索速度慢。
}
